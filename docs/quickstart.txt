Quick tutorial
==============

To get started, you only need to know about one class, `FieldSet`, and a
handful of methods:

* `render`: returns a string containing the form input html
* `validate`: true if the form passes its validations; otherwise, false
* `sync`: syncs the model instance that was bound to the input data

This quickstart illustrates these four methods. For full details on
customizing `FieldSet` behavior, see FormAlchemyDocumentation03.

We'll start with two simple SQLAlchemy models with a one-to-many relationship
(each User can have many Orders)::

  >>> from sqlalchemy import *
  >>> from sqlalchemy.orm import *
  >>> from sqlalchemy.ext.declarative import declarative_base
  >>> engine = create_engine('sqlite://')
  >>> Session = scoped_session(sessionmaker(autoflush=True, bind=engine))
  >>> Base = declarative_base(engine, mapper=Session.mapper)

  >>> class Order(Base):
  ...     __tablename__ = 'orders'
  ...     id = Column('id', Integer, primary_key=True)
  ...     user_id = Column('user_id', Integer, ForeignKey('users.id'), nullable=False)
  ...     quantity = Column('quantity', Integer, nullable=False)
  ...     def __str__(self):
  ...        return 'Quantity: %s' % self.quantity

  >>> class User(Base):
  ...     __tablename__ = 'users'
  ...     id = Column('id', Integer, primary_key=True)
  ...     name = Column('name', Unicode(30))
  ...     orders = relation(Order, backref='user')
  ...     def __str__(self):
  ...         return self.name

  >>> Base.metadata.create_all()
  >>> session = Session()

  >>> bill = User(name='Bill')
  >>> john = User(name='John')
  >>> order1 = Order(user=bill, quantity=10)
  >>> session.commit()

Now, let's render a form for editing the order we've created.
First we need to import the FieldSet class::

  >>> from formalchemy import FieldSet

.. Use the test class

  >>> from formalchemy.tests import FieldSet

Then bind it to a mapper and render it::

  >>> fs = FieldSet(order1)
  >>> print fs.render()
  <div>
   <label class="field_req" for="Order-1-quantity">
    Quantity
   </label>
   <input id="Order-1-quantity" name="Order-1-quantity" type="text" value="10" />
  </div>
  <script type="text/javascript">
   //<![CDATA[
  document.getElementById("Order-1-quantity").focus();
  //]]>
  </script>
  <div>
   <label class="field_req" for="Order-1-user_id">
    User
   </label>
   <select id="Order-1-user_id" name="Order-1-user_id">
    <option value="1" selected="selected">
     Bill
    </option>
    <option value="2">
     John
    </option>
   </select>
  </div>

Note how the options for the User input are automatically loaded from the
database.

Now let's process some user input. In a real application, you'd get the post
data from your request object; here we'll just hardcode some::

  >>> from formalchemy import SimpleMultiDict
  >>> fs = FieldSet(order1, data=SimpleMultiDict({'Order-1-quantity': '7', 'Order-1-user_id': '2'}))
  >>> if fs.validate():
  ...     fs.sync()

  >>> order1.quantity
  7
  >>> order1.user_id
  2
  >>> session.commit()

