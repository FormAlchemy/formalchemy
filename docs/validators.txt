:mod:`formalchemy.validators` -- Validation stuff
=================================================

.. automodule:: formalchemy.validators

Exception
---------

All validators raise a `ValidationError` if the validation failed.

.. exception:: ValidationError


Validators
----------

`FormAlchemy` came with a set of validators::

  >>> from formalchemy.validators import *

.. autofunction:: integer

  >>> integer('1')
  1
  >>> integer('1.2')
  Traceback (most recent call last):
  ...
  ValidationError: Value is not an integer

.. autofunction:: float_

  >>> float_('1')
  1.0
  >>> float_('1.2')
  1.2
  >>> float_('asdf')
  Traceback (most recent call last):
  ...
  ValidationError: Value is not a number

.. autofunction:: currency

  >>> currency('asdf')
  Traceback (most recent call last):
  ...
  ValidationError: Value is not a number
  >>> currency('1')
  Traceback (most recent call last):
  ...
  ValidationError: Please specify full currency value, including cents (e.g., 12.34)
  >>> currency('1.0')
  Traceback (most recent call last):
  ...
  ValidationError: Please specify full currency value, including cents (e.g., 12.34)
  >>> currency('1.00')

.. autofunction:: required

  >>> required('asdf')
  >>> required('')
  Traceback (most recent call last):
  ...
  ValidationError: Please enter a value

.. autofunction:: minlength

  >>> minlength(0)('a')
  Traceback (most recent call last):
  ...
  ValueError: Invalid minimum length
  >>> minlength(2)('a')
  Traceback (most recent call last):
  ...
  ValidationError: Value must be at least 2 characters long
  >>> minlength(2)('ab')

.. autofunction:: maxlength

  >>> maxlength(0)('a')
  Traceback (most recent call last):
  ...
  ValueError: Invalid maximum length
  >>> maxlength(1)('a')
  >>> maxlength(1)('ab')
  Traceback (most recent call last):
  ...
  ValidationError: Value must be no more than 1 characters long

.. autofunction:: regex

  >>> regex('[A-Z]+$')('ASDF')
  >>> regex('[A-Z]+$')('abc')
  Traceback (most recent call last):
  ...
  ValidationError: Invalid input
  >>> import re
  >>> pattern = re.compile('[A-Z]+$', re.I)
  >>> regex(pattern)('abc')

.. autofunction:: email

  >>> email('a+formalchemy@gmail.com')
  >>> email('a+."<>"@gmail.com')
  >>> email('a+."<>"."[]"@gmail.com')
  >>> email('a+."<>@gmail.com')
  Traceback (most recent call last):
  ...
  ValidationError: Unterminated quoted section in recipient
  >>> email('a+."<>""[]"@gmail.com')
  Traceback (most recent call last):
  ...
  ValidationError: Quoted section must be followed by '@' or '.'
  >>> email('<>@gmail.com')
  Traceback (most recent call last):
  ...
  ValidationError: Reserved character present in recipient
  >>> email(chr(0) + '@gmail.com')
  Traceback (most recent call last):
  ...
  ValidationError: Control characters present
  >>> email(chr(129) + '@gmail.com')
  Traceback (most recent call last):
  ...
  ValidationError: Non-ASCII characters present
  >>> email('')
  >>> email('asdf')
  Traceback (most recent call last):
  ...
  ValidationError: Missing @ sign
  >>> email('@')
  Traceback (most recent call last):
  ...
  ValidationError: Recipient must be non-empty
  >>> email('a@')
  Traceback (most recent call last):
  ...
  ValidationError: Domain must be non-empty
  >>> email('a@gmail.com.')
  Traceback (most recent call last):
  ...
  ValidationError: Domain must not end with '.'
  >>> email('a@gmail..com')
  Traceback (most recent call last):
  ...
  ValidationError: Domain must not contain '..'
  >>> email('a@gmail>com')
  Traceback (most recent call last):
  ...
  ValidationError: Reserved character present in domain

Custom validator
----------------

You can write your own validator::

  >>> def negative(value):
  ...     if isinstance(value, int) and value < 0:
  ...         return True
  ...     raise ValidationError('Value must be greater than 0')

Then bind it to a field::

  >>> from formalchemy.tests import *
  >>> from formalchemy import fatypes
  >>> fs = FieldSet(One)
  >>> fs.add(Field('number', type=fatypes.Integer))
  >>> fs.configure(include=[fs.number.validate(negative)])

Then it should work::  

  >>> fs.rebind(One, data={'One--number': '-2'})
  >>> fs.validate()
  True

  >>> fs.rebind(One, data={'One--number': '2'})
  >>> fs.validate()
  False

