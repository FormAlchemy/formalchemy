:mod:`formalchemy.ext.pylons` -- Pylons extensions
==================================================

.. automodule:: formalchemy.ext.pylons

Administration interface
========================

Setup
-----

First, generate a controller in your application::

  $ paster controller admin

Next, edit your `controllers/admin.py`, replacing `yourapp` with your application name::

  import logging

  from yourapp.lib.base import *
  from yourapp import model
  from formalchemy.ext.pylons.admin import FormAlchemyAdminController

  log = logging.getLogger(__name__)

  class AdminControllerBase(BaseController):
      model = model # where your SQLAlchemy mappers are
      forms = None # module containing FormAlchemy fieldsets definitions
      def Session(self): # Session factory
          AdminControllerBase.Session = model.meta.Session
          return AdminControllerBase.Session

  AdminController = FormAlchemyAdminController(AdminControllerBase)

Add these lines in `config/routing.py`::

  from formalchemy.ext.pylons import maps
  from yourapp.controllers.admin import AdminController
  ...

  def make_map():
      """Create, configure and return the routes Mapper"""
      ...

      # CUSTOM ROUTES HERE
      maps.admin_map(map, AdminController, 'admin')

      ...

All done!  Now you can go to the `/admin/` url.


Customization
-------------

`FormAlchemyAdminController` creates a new class having `AdminControllerBase`
and the internal FA admin controller (formalchemy.ext.pylons.AdminController) 
as its parent classes, in that order.  

So, you can do simple customization just by overriding the admin controller
methods (`index`, `list`, `edit`, `delete` -- create is just edit with `id=None`) 
in `AdminControllerBase`, e.g.,::

  class AdminControllerBase(BaseController):
      ...

      @auth_required
      def edit(self, *args, **kwargs):
          return super(AdminControllerBase, self).edit(*args, **kwargs)

To customize the forms used to list and edit your objects, 
create a module `yourapp.forms` and specify that
as the forms module in AdminController.  In this module, create 
:class:`~formalchemy.forms.FieldSet` (for create and edit forms)
and :class:`~formalchemy.tables.Grid` (for object lists) 
instances for the models you wish to customize.  (The `Grids` will
automatically get edit and delete links added, and be made readonly.)

See http://docs.formalchemy.org/forms.html for details on form configuration.


Troubleshooting
---------------

If you click on a model link from the top-level admin page and get
"NotImplementedError: Action '<modelname>' is not implemented," then
your routing hasn't been properly configured for the admin app.  See
"Add these lines in `config/routing.py`" above.

If you don't see all your models on the top-level admin page, you'll
need to import them into your model module, or tell `FormAlchemy` the
correct module to look in (the "model = " line in the controller class
you created).  In particular, `FormAlchemy` does not recursively scan
for models, so if you have models in e.g., model/foo.py, you will want
to add "from foo import *" in model/__init__.py.
