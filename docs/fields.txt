:mod:`formalchemy.fields` -- Fields and Renderers
=================================================

.. automodule:: formalchemy.fields

Import `FormAlchemy` fields and renderers::

    >>> from formalchemy.fields import *

Stuff need for testing::

    >>> from formalchemy.tests import *
    >>> from datetime import datetime

Fields
------

.. autoclass:: AbstractField
   :members:

.. autoclass:: Field
   :members:

.. autoclass:: AttributeField
   :members:

Renderers
---------

.. autoclass:: FieldRenderer
   :members:

.. autoclass:: TextFieldRenderer
   :members:

    >>> fs = FieldSet(One)
    >>> fs.add(Field(name='text', value='a value'))
    >>> print fs.text.render()
    <input id="One--text" name="One--text" type="text" value="a value" />

    >>> print fs.text.render_readonly()
    a value

.. autoclass:: IntegerFieldRenderer
   :members:

.. autoclass:: PasswordFieldRenderer
   :members:

    >>> fs = FieldSet(One)
    >>> fs.add(Field(name='passwd').with_renderer(PasswordFieldRenderer))
    >>> print fs.passwd.render()
    <input id="One--passwd" name="One--passwd" type="password" />

    >>> print fs.passwd.render_readonly()
    ******

.. autoclass:: TextAreaFieldRenderer
   :members:

    >>> fs = FieldSet(One)
    >>> fs.add(Field(name='text',value='a value').with_renderer(TextAreaFieldRenderer))
    >>> print fs.text.render()
    <textarea id="One--text" name="One--text">a value</textarea>

    >>> print fs.text.render_readonly()
    a value

.. autoclass:: HiddenFieldRenderer
   :members:

    >>> fs = FieldSet(One)
    >>> fs.add(Field(name='text', value='h').with_renderer(HiddenFieldRenderer))
    >>> print fs.text.render()
    <input id="One--text" name="One--text" type="hidden" value="h" />

    >>> print fs.text.render_readonly()
    <BLANKLINE>

.. autoclass:: CheckBoxFieldRenderer
   :members:

.. autoclass:: FileFieldRenderer
   :members:

.. autoclass:: DateFieldRenderer
   :members:

    >>> date = datetime(2000, 12, 31, 9, 00)
    >>> fs = FieldSet(One)
    >>> fs.add(Field(name='date', type=types.Date, value=date))
    >>> print fs.date.render_readonly()
    2000-12-31

.. autoclass:: TimeFieldRenderer
   :members:

    >>> date = datetime(2000, 12, 31, 9, 03, 30)
    >>> fs = FieldSet(One)
    >>> fs.add(Field(name='date', type=types.Time, value=date))
    >>> print fs.date.render_readonly()
    09:03:30

.. autoclass:: DateTimeFieldRendererRenderer
   :members:

    >>> date = datetime(2000, 12, 31, 9, 03, 30)
    >>> fs = FieldSet(One)
    >>> fs.add(Field(name='date', type=types.DateTime, value=date))
    >>> print fs.date.render_readonly()
    2000-12-31 09:03:30


.. autoclass:: RadioSet
   :members:

.. autoclass:: CheckBoxSet
   :members:

.. autoclass:: SelectFieldRenderer
   :members:

Custom renderer
---------------

You can write your own renderer::


    >>> class LinkFieldRenderer(FieldRenderer):
    ...     def render(self, **kwargs):
    ...         """render html for edit mode"""
    ...         return FieldRenderer.render(self, **kwargs)
    ...     def render_readonly(self, **kwargs):
    ...         """render html for read only mode"""
    ...         kwargs = {'value':self.field.raw_value}
    ...         return '<a href="%(value)s">%(value)s</a>' % kwargs

Then bind it to a field::


  >>> from formalchemy.tests import *
  >>> fs = FieldSet(One)
  >>> fs.add(Field('link', value='http://www.formalchemy.org'))
  >>> fs.configure(include=[fs.link.with_renderer(LinkFieldRenderer)])

Here is the result for edit mode::  

  >>> print fs.render()
  <div>
   <label class="field_opt" for="One--link">
    Link
   </label>
   <input id="One--link" name="One--link" type="text" value="http://www.formalchemy.org" />
  </div>
  <script type="text/javascript">
   //<![CDATA[
  document.getElementById("One--link").focus();
  //]]>
  </script>


And for read only mode::  

  >>> fs.readonly = True
  >>> print fs.render()
  <tbody>
   <tr>
    <td class="field_readonly">
     Link:
    </td>
    <td>
     <a href="http://www.formalchemy.org">
      http://www.formalchemy.org
     </a>
    </td>
   </tr>
  </tbody>


