:mod:`formalchemy.forms` -- Form generation
********************************************

.. Commented imports

   >>> from formalchemy.tests import *

.. automodule:: formalchemy.forms

Configuring and rendering forms
===============================

A note on Sessions
------------------

`FormAlchemy` can save you the most time if you use 
contextual Sessions: 
http://www.sqlalchemy.org/docs/05/session.html#contextual-thread-local-sessions.
Otherwise, you will have to manually pass Session objects when you bind
:class:`~formalchemy.forms.FieldSet` and :class:`~formalchemy.tables.Grid`
instances to your data.


Binding
-------

`FormAlchemy` :class:`~formalchemy.forms.FieldSet` constructors take three parameters:

- `model`: 
      a SQLAlchemy mapped class or instance.  New object creation
      should be done by passing the class, which will need a default
      (no-parameter) constructor.  After construction or binding of
      the :class:`~formalchemy.forms.FieldSet`, the instantiated object will be available as
      the `.model` attribute.

- `session=None`: 
      the session to use for queries (for relations). If `model` is associated
      with a session, that will be used by default. (Objects mapped with a
      `scoped_session
      <http://www.sqlalchemy.org/docs/05/session.html#contextual-thread-local-sessions>`_
      will always have a session. Other objects will
      also have a session if they were loaded by a Query.)

- `data=None`: 
      dictionary-like object of user-submitted data to validate and/or
      sync to the `model`. Scalar attributes should have a single
      value in the dictionary; multi-valued relations should have a
      list, even if there are zero or one values submitted.  Currently,
      pylons request.params() objects and plain dictionaries are known
      to work.

- `prefix=None`:
      the prefix to prepend to html name attributes. This is useful to avoid 
      field name conflicts when there are two fieldsets creating objects
      from the same model in one html page.  (This is not needed when
      editing existing objects, since the object primary key is used as part
      of the field name.)


Only the `model` parameter is required.

After binding, the :class:`~formalchemy.forms.FieldSet`.model attribute will always be an instance.
If you bound to a class, `FormAlchemy` will call its constructor with no
arguments to create an appropriate instance.  (This instance will not
be added to the current session, even if you are using Session.mapper.)

All of these parameters may be overridden by the `bind` or `rebind`
methods.  The `bind` method returns a new instance bound as specified,
while `rebind` modifies the current :class:`~formalchemy.forms.FieldSet` and has no
return value. (You may not `bind` to a different type of SQLAlchemy
model than the initial one -- if you initially bind to a `User`, you
must subsequently bind `User`s to that :class:`~formalchemy.forms.FieldSet`.)

Typically, you will configure a :class:`~formalchemy.forms.FieldSet` once in a common
form library, then `bind` specific instances later for editing.  (The
`bind` method is thread-safe; `rebind` is not.)  Thus::

  # library.py
  >>> fs = FieldSet(User)
  >>> fs.configure(options=[]) # put all configuration stuff here

  # controller.py
  >>> from library import fs
  >>> user = session.query(User).first()
  >>> fs2 = fs.bind(user)
  >>> html = fs2.render()

Fields
------

Each :class:`~formalchemy.forms.FieldSet` will have a :mod:`Field
<formalchemy.fields>` created for each attribute of the bound model.
Additional :mod:`Field <formalchemy.fields>`s may be added manually; see below.
A :mod:`Field <formalchemy.fields>` knows how to render itself, and most
customization is done by telling a :mod:`Field <formalchemy.fields>` to modify
itself appropriately.

:mod:`Field <formalchemy.fields>` s are accessed simply as attributes of the
:class:`~formalchemy.forms.FieldSet`::

  >>> fs = FieldSet(bill)
  >>> print fs.name.value
  Bill

If you have an attribute name that conflicts with a built-in
:class:`~formalchemy.forms.FieldSet` attribute, you can use the `fs._fields`
dictionary instead.  So these are equivalent::

  >>> fs.name == fs._fields['name']
  True


Field Modification
------------------
  
:mod:`Field <formalchemy.fields>` rendering can be modified with the following methods:


- `validate(self, validator)`: 
      Add the `validator` function to the list of validation routines to run
      when the :class:`~formalchemy.forms.FieldSet`'s `validate` method is run.
      Validator functions take one parameter: the value to validate. This value
      will have already been turned into the appropriate data type for the
      given :mod:`Field <formalchemy.fields>` (string, int, float, etc.). It should raise
      `ValidationException` if validation fails with a message explaining the
      cause of failure.

- `required(self)`: 
      Convenience method for `validate(validators.required)`.  By
      default, NOT NULL columns are required.  You can only add
      required-ness, not remove it.

- `label(self)`:
      Change the label associated with this field.  By default, the
      field name is used, modified for readability (e.g.,
      'user_name' -> 'User name').

- `with_null_as(self, option)`:
      For optional foreign key fields, render null as the given option
      tuple of text, value.

- `with_renderer(self, renderer)`:
      Change the renderer class used to render this field.  Used for
      one-off renderer changes; if you want to change the renderer
      for all instances of a Field type, modify
      FieldSet.default_renderers instead.

- `with_metadata(self, **attrs)`:
      Add/modify some metadata for the Field. Use this to attach any
      metadata to your field. By default, the the `instructions` property
      is used to show additional text below or beside your rendered Field.

- `disabled(self)`:
      Render the field disabled.

- `readonly(self)`:
      Render the field readonly.

- `hidden(self)`:
      Render the field hidden.  (Value only, no label.)

- `password(self)`:
      Render the field as a password input, hiding its value.

- `textarea(self, size=None)`:
      Render the field as a textarea.

- `radio(self, options=None)`:
      Render the field as a set of radio buttons.

- `checkbox(self, options=None)`:
      Render the field as a set of checkboxes.

- `dropdown(self, options=None, multiple=False, size=5)`:
      Render the field as an HTML select field.  
      (With the `multiple` option this is not really a 'dropdown'.)
        
Methods taking an `options` parameter will accept several ways of
specifying those options:

- an iterable of SQLAlchemy objects; `str()` of each object will be the description, and the primary key the value
- a SQLAlchemy query; the query will be executed with `all()` and the objects returned evaluated as above
- an iterable of (description, value) pairs
- a dictionary of {description: value} pairs

Options can be "chained" indefinitely because each modification returns a new
:mod:`Field <formalchemy.fields>` instance, so you can write::

  >>> fs.add(Field('foo').dropdown(options=[('one', 1), ('two', 2)]).radio())

or::

  >>> fs.configure(options=[fs.name.label('Username').readonly()])


Adding Fields
-------------
  
You can add additional fields not in your SQLAlchemy model with the `add` 
method, which takes a :mod:`Field <formalchemy.fields>` object as parameter.

The :mod:`Field <formalchemy.fields>` constructor takes these parameters (see
also the :class:`formalchemy.fields.Field` class):


- `name`: 
      field name

- `type=types.String`: 
      data type, from formalchemy.types (Integer, Float, String, Binary,
      Boolean, Date, DateTime, Time) or a custom type

- `value=None`: 
      default value.  If value is a callable, it will be passed the current
      bound model instance when the value is read.  This allows creating a
      Field whose value depends on the model once, then binding different
      instances to it later.
  
Other modification of manually created Fields must be done with the
methods described above, under "Field Modification."


Fields to render
----------------
  
The `configure` method specifies a set of attributes to be rendered.  By
default, all attributes are rendered except primary keys and foreign keys.
But, relations **based on** foreign keys **will** be rendered.  For example, if
an `Order` has a `user_id` FK and a `user` relation based on it, `user` will be
rendered (as a select box of `User`s, by default) but `user_id` will not.

Parameters:


- `pk=False`: 
      set to True to include primary key columns

- `exclude=[]`: 
      an iterable of attributes to exclude.  Other attributes will
      be rendered normally

- `include=[]`: 
      an iterable of attributes to include.  Other attributes will
      not be rendered

- `options=[]`: 
      an iterable of modified attributes.  The set of attributes to
      be rendered is unaffected

- `global_validator=None`: 
      `global_validator` should be a function that performs
      validations that need to know about the entire form.

- `focus=True`: 
      the attribute (e.g., `fs.orders`) whose rendered input element
      gets focus. Default value is True, meaning, focus the first
      element. False means do not focus at all.

- `readonly=False`:
      if true, the fieldset will be rendered as a table (tbody)
      instead of a group of input elements.  Opening and closing
      table tags are not included.

Only one of {`include`, `exclude`} may be specified.

Note that there is no option to include foreign keys.  This is
deliberate.  Use `include` if you really need to manually edit FKs.

If `include` is specified, fields will be rendered in the order given
in `include`.  Otherwise, fields will be rendered in order of declaration,
with table fields before mapped properties.  (However, mapped property order
is sometimes ambiguous, e.g. when backref is involved.  In these cases,
FormAlchemy will take its best guess, but you may have to force the 
"right" order with `include`.)

Examples: given a :class:`~formalchemy.forms.FieldSet` `fs` bound to a `User`
instance as a model with primary key `id` and attributes `name` and `email`,
and a relation `orders` of related Order objects, the default will be to render
`name`, `email`, and `orders`. To render the orders list as checkboxes instead
of a select, you could specify::

  >>> fs2 = fs.bind(bill)
  >>> fs2.configure(options=[fs.orders.checkbox()]) 

To render only name and email::

  >>> fs2 = fs.bind(bill)
  >>> fs2.configure(include=[fs.name, fs.email]) 

or::

  >>> fs2 = fs.bind(bill)
  >>> fs2.configure(exclude=[fs.orders]) 

Of course, you can include modifications to a field in the `include`
parameter, such as here, to render name and options-as-checkboxes::
  
  >>> fs2 = fs.bind(bill)
  >>> fs2.configure(include=[fs.name, fs.orders.checkbox()]) 


Rendering
---------

Once you've configured your :class:`~formalchemy.forms.FieldSet`,
just call the `render` method to get an HTML string suitable for
including in your page::

    >>> fs = FieldSet(bill)
    >>> print fs.render() 
    <div>
     <label class="field_req" for="User-1-email">
      Email
     </label>
     <input id="User-1-email" maxlength="40" name="User-1-email" type="text" value="bill@example.com" />
    </div>
    <script type="text/javascript">
     //<![CDATA[
    document.getElementById("User-1-email").focus();
    //]]>
    </script>
    <div>
     <label class="field_req" for="User-1-password">
      Password
     </label>
     <input id="User-1-password" maxlength="20" name="User-1-password" type="text" value="1234" />
    </div>
    <div>
     <label class="field_opt" for="User-1-name">
      Name
     </label>
     <input id="User-1-name" maxlength="30" name="User-1-name" type="text" value="Bill" />
    </div>
    <div>
     <label class="field_opt" for="User-1-orders">
      Orders
     </label>
     <select id="User-1-orders" multiple="multiple" name="User-1-orders" size="5">
      <option value="2">
       Quantity: 5
      </option>
      <option value="3">
       Quantity: 6
      </option>
      <option value="1" selected="selected">
       Quantity: 10
      </option>
     </select>
    </div>

Note that there is no `form` element!  You must provide that yourself.

You can also render individual fields for more fine-grained control::

  >>> fs = FieldSet(bill)
  >>> print fs.name.render()
  <input id="User-1-name" maxlength="30" name="User-1-name" type="text" value="Bill" />


Including data from more than one class
=======================================

`FormAlchemy` only supports binding to a single class, but a single class can itself
include data from multiple tables.  Example::

  >>> class Order__User(Base):
  ...     __table__ = join(Order.__table__, User.__table__).alias('__orders__users')

Such a class can then be used normally in a :class:`~formalchemy.forms.FieldSet`.

See http://www.sqlalchemy.org/docs/05/mappers.html#advdatamapping_mapper_joins
for full details on mapping multiple tables to a single class.


Non-SQLAlchemy forms
====================

You can create a :class:`~formalchemy.forms.FieldSet` from non-SQLAlchemy, new-style (inheriting
from `object`) classes, like this::

  >>> class Manual(object):
  ...     a = Field()
  ...     b = Field(type=types.Integer).dropdown([('one', 1), ('two', 2)])

  >>> fs = FieldSet(Manual)

:mod:`Field <formalchemy.fields>` declaration is the same as for adding fields
to a SQLAlchemy-based :class:`~formalchemy.forms.FieldSet`, except that you do
not give the Field a name (the attribute name is used).

You can still validate and sync a non-SQLAlchemy class instance, but
obviously persisting any data post-sync is up to you.


Advanced Customization: Form Templates
======================================

There are two parts you can customize in a :class:`~formalchemy.forms.FieldSet`
subclass short of writing your own `render` method.  These are `prettify` and
`_render`.  As in::
    
  class MyFieldSet(FieldSet):
      prettify = staticmethod(myprettify)
      _render = staticmethod(myrender)
          
`prettify` is a function that, given an attribute name ('user_name') turns it
into something usable as an HTML label ('User name').
    
`_render` should be a template rendering method, such as `Template.render` from
a mako Template or `Template.substitute` from a Tempita Template.


`_render` should take as parameters:

- `fieldset`
      the :class:`~formalchemy.forms.FieldSet` object to render

Your template will be particularly interested in these
:class:`~formalchemy.forms.FieldSet` attributes:

- `render_fields`:
      the list of fields the user has configured for rendering

- `errors`: 
      a dictionary of validation failures, keyed on field.  `errors[None]` are
      errors applying to the form as a whole rather than a specific field.

- `prettify`: 
      as above

- `focus`: 
      the field to focus

You can also override `prettify` and `_render` on a
per-:class:`~formalchemy.forms.FieldSet` basis::
    
  fs = FieldSet(...)
  fs.prettify = myprettify
  fs._render = ...

The default template is `formalchemy.forms.template_text_tempita`.


Really advanced customization
=============================

You can derive your own subclasses from :class:`~formalchemy.forms.FieldSet` or
:class:`~formalchemy.forms.AbstractFieldSet` to provide a customized `render`
and/or `configure`.

`AbstractFieldSet` encorporates validation/errors logic and provides a default
`configure` method.  It does _not_ provide `render`.

You can write `render` by manually sticking strings together if that's
what you want, but we recommend using a templating package for clarity
and maintainability.  `FormAlchemy` includes the Tempita templating
package as formalchemy.tempita; see http://pythonpaste.org/tempita/
for documentation.
    
`formalchemy.forms.template_text_tempita` is the default template used
by `FieldSet.` We recommend looking at that to get started.
`FormAlchemy` also includes a Mako version,
`formalchemy.forms.template_text_mako`, and will use that instead if
Mako is available.  The rendered HTML is identical but Mako
should be faster.

Classes definitions
===================

AbstractFieldSet
----------------

.. autoclass:: AbstractFieldSet
   :members:

FieldSet
--------

.. autoclass:: FieldSet
   :members:

